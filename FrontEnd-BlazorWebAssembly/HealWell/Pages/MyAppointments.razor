@page "/myappointments/{PatientId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@using HealWell.Models
@using HealWell.Services
@inject AppointmentService appointmentservice

<style>
    /* Appointments Page Styling */
    .dark-theme .appointments-section{
    background-color: #495057 !important;
    }
    .appointments-section {
    padding: 60px 0;
    background-color: #f9f9f9;
    }

    .appointment-controls {
    display: flex;
    gap: 15px;
    margin-bottom: 30px;
    flex-wrap: wrap;
    }

    .appointment-controls .form-control {
    flex: 1;
    min-width: 200px;
    }

    .appointments-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 25px;
    margin-bottom: 40px;
    }

    .appointment-card {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    }

    .appointment-card.telehealth {
    border-left: 4px solid #4285f4;
    }

    .appointment-card.inperson {
    border-left: 4px solid #34a853;
    }

    .appointment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    }

    .appointment-type {
    display: flex;
    align-items: center;
    gap: 5px;
    font-size: 0.9rem;
    }

    .appointment-details p {
    margin: 10px 0;
    display: flex;
    align-items: center;
    gap: 8px;
    }

    .appointment-details i {
    width: 20px;
    color: #5f6368;
    }

    .additional-message {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #eee;
    font-size: 0.9rem;
    }

    .appointment-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
    }

    .btn-edit, .btn-delete {
    padding: 8px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 5px;
    }

    .btn-edit {
    background: #4285f4;
    color: white;
    }

    .btn-delete {
    background: #ea4335;
    color: white;
    }

    .btn-new-appointment {
    background: var(--primary-main);
    color: white;
    padding: 12px 25px;
    border: none;
    border-radius: 50px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    }

    .loading-spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto;
    }



    .no-appointments {
    text-align: center;
    color: #666;
    font-size: 1.1rem;
    }

    /* Modal Styles */
    .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    }

    .modal-content {
    background: white;
    padding: 30px;
    border-radius: 10px;
    max-width: 500px;
    width: 90%;
    }

    .modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 25px;
    }

    .btn-cancel, .btn-confirm {
    padding: 8px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    }

    .btn-cancel {
    background: #f1f1f1;
    color: #333;
    }

    .btn-confirm {
    background: #ea4335;
    color: white;
    }


    }
</style>
<Header></Header>
<section class="appointments-section">
    <div class="container">
        <h1>My Appointments</h1>

        <!-- Filter Controls -->
        <div class="appointment-controls">
            <select @bind="filterType" class="form-control">
                <option value="all">All Appointments</option>
                <option value="upcoming">Upcoming</option>
                <option value="past">Past</option>
                <option value="telehealth">Telehealth</option>
                <option value="inperson">In-Person</option>
            </select>
            <input type="text" @bind="searchQuery" placeholder="Search appointments..." class="form-control" />
        </div>

        <!-- Appointments List -->
        <div class="appointments-list">
            @if (appointments == null)
            {
                <div class="loading-spinner"></div>
            }
            else if (!filteredAppointments.Any())
            {
                <p class="no-appointments">No appointments found.</p>
            }
            else
            {
                foreach (var appointment in filteredAppointments)
                {
                    <div class="appointment-card @(appointment.IsTeleHealth ? "telehealth" : "inperson")">
                        <div class="appointment-header">
                            <h3 style="color:black !important">@appointment.Department</h3>
                            <span class="appointment-type">
                                @if (appointment.IsTeleHealth)
                                {
                                    <i style="color:black !important" class="fas fa-video"></i> <span style="color:black !important">Telehealth</span>
                                }
                                else
                                {
                                    <i style="color:black !important" class="fas fa-hospital"></i> <span style="color:black !important">In-Person</span>
                                }
                            </span>
                        </div>

                        <div class="appointment-details">
                            <p><i class="fas fa-user"></i> @appointment.Name</p>
                            <p><i class="fas fa-envelope"></i> @appointment.Email</p>
                            <p><i class="fas fa-phone"></i> @appointment.Phone</p>
                            <p><i class="far fa-calendar-alt"></i> @appointment.Date.ToString("MMMM dd, yyyy")</p>
                            @if (appointment.Doctor != null)
                            {
                                <p><i class="fas fa-user-md"></i> Dr. @appointment.Doctor.Name</p>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(appointment.AdditionalMessage))
                        {
                            <div class="additional-message">
                                <p style="color:black !important"><i style="color:black !important" class="fas fa-comment"></i> @appointment.AdditionalMessage</p>
                            </div>
                        }

                        <div class="appointment-actions">
                            <button @onclick="@(() => Navigation.NavigateTo($"/editappointment/{appointment.Id}"))" class="btn-edit">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button @onclick="() => ConfirmDelete(appointment.Id)" class="btn-delete">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Add New Appointment -->
        <div class="text-center">
            <button @onclick="@(() => Navigation.NavigateTo("/appointment"))" class="btn-new-appointment">
                <i class="fas fa-plus"></i> Book New Appointment
            </button>
        </div>
    </div>
</section>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Confirm Delete</h3>
            <p>Are you sure you want to delete this appointment?</p>
            <div class="modal-actions">
                <button @onclick="CancelDelete" class="btn-cancel">Cancel</button>
                <button @onclick="DeleteAppointment" class="btn-confirm">Delete</button>
            </div>
        </div>
    </div>
}

<Footer></Footer>

@code {
    [Parameter]
    public int PatientId { get; set; }
    public List<Appointment> appointments;
    public List<Appointment> filteredAppointments;
    private string filterType = "all";
    private string searchQuery = "";
    private bool showDeleteModal = false;
    private int appointmentToDelete;

    protected override async Task OnParametersSetAsync()
    {
        // Load user appointments from API
        try
        {
          appointments = await appointmentservice.GetPatientAppointments(PatientId);
       
            // Filter appointments initially
            FilterAppointments();
          
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading appointments: {ex.Message}");
        }
    }

    private void FilterAppointments()
    {
        if (appointments == null) return;

        var query = appointments.AsQueryable();

        // Apply type filter
        switch (filterType.ToLower())
        {
            case "upcoming":
                query = query.Where(a => a.Date >= DateTime.Today);
                break;
            case "past":
                query = query.Where(a => a.Date < DateTime.Today);
                break;
            case "telehealth":
                query = query.Where(a => a.IsTeleHealth);
                break;
            case "inperson":
                query = query.Where(a => !a.IsTeleHealth);
                break;
        }

        // Apply search query
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            query = query.Where(a =>
                a.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                a.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                a.Phone.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                a.Department.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                (a.Doctor != null && a.Doctor.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)));
        }

        filteredAppointments = query
            .OrderByDescending(a => a.Date)
            .ToList();
    }

    private void EditAppointment(int id)
    {
        Navigation.NavigateTo($"/editappointment/{id}");
    }

    private void ConfirmDelete(int id)
    {
        appointmentToDelete = id;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
    }

    private async Task DeleteAppointment()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/appointments/{appointmentToDelete}");
            if (response.IsSuccessStatusCode)
            {
                appointments.RemoveAll(a => a.Id == appointmentToDelete);
                FilterAppointments();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting appointment: {ex.Message}");
        }
        finally
        {
            showDeleteModal = false;
        }
    }
}