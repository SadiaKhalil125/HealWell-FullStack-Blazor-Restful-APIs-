@page "/doctor/patient/{PatientId:int}/{DoctorId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using HealWell.Models
@using System.Net.Http.Json
<Header/>
<style>
    body {
        margin: 0;
        background-color: #f8f9fa;
        font-family: 'Segoe UI', sans-serif;
    }

</style>
<div class="patient-profile-container">
    <div class="profile-header">
        @* <button class="btn-back" @onclick="@(() => NavigationManager.NavigateTo("/doctor-portal/"))"> *@
        @*     <i class="fas fa-arrow-left"></i> Back to Dashboard *@
        @* </button> *@
        <h3 style="font-size:2em; font-weight:bolder">Patient Profile</h3>
    </div>

    @if (isLoading)
    {
        <div class="loading-spinner">
            <i class="fas fa-spinner fa-spin"></i> Loading patient data...
        </div>
    }
    else if (patient != null)
    {
        <div class="profile-card">
            <div class="profile-section">
                <div class="profile-info">
                    <h4>@patient.Name</h4>
                    <p><i class="fas fa-envelope"></i> @patient.Email</p>
                </div>
            </div>

            <div class="health-section">
                <h5><i class="fas fa-heartbeat"></i> Health Metrics</h5>
                <div class="health-metrics">
                    <div class="metric">
                        <span class="metric-label">Blood Pressure</span>
                        <span class="metric-value">@(patient.LastBloodPressure ?? "Not recorded")</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Weight</span>
                        <span class="metric-value">@patient.Weight lbs</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">A1C Level</span>
                        <span class="metric-value">@patient.AIC</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Immunizations</span>
                        <span class="metric-value @(patient.ImmunizationsUpToDate ? "text-success" : "text-warning")">
                            @(patient.ImmunizationsUpToDate ? "Up to date" : "Needs update")
                        </span>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(patient.PreviousPrescriptions))
            {
                <div class="prescription-section">
                    <h5><i class="fas fa-prescription-bottle-alt"></i> Previous Prescriptions</h5>
                    <div class="prescription-notes" style="color:black !important">
                        @patient.PreviousPrescriptions
                    </div>
                </div>
            }

            <div class="action-buttons">
                <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo($"/records/{PatientId}"))">
                    <i class="fas fa-file-medical"></i> View Health Records
                </button>
                <button class="btn btn-secondary" @onclick="@(() => NavigationManager.NavigateTo($"/addprescription/{PatientId}/{DoctorId}"))">
                    <i class="fas fa-prescription"></i> New Prescription
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i> Patient not found
        </div>
    }
</div>
<Footer/>
@code {
    [Parameter]
    public int PatientId { get; set; }
    [Parameter]
    public int DoctorId { get; set; }
    private PatientDto patient = new();
    private bool isLoading = true;
    private Patient patient1 = new();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // Fetch patient data from API

            var response = await Http.GetAsync($"https://localhost:7047/api/Patients/{PatientId}");
            patient1 = await response.Content.ReadFromJsonAsync<Patient>();
            patient.Id = patient1.Id;
            patient.Email = patient1.Email;
            patient.Name = patient1.Name;
            patient.PreviousPrescriptions = patient1.PreviousPrescriptions;
            patient.LastBloodPressure = patient1.LastBloodPressure;
            patient.Weight = patient1.Weight;
            patient.AIC = patient1.AIC;
            patient.ImmunizationsUpToDate = patient1.ImmunizationsUpToDate;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading patient: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Simplified Patient model for display purposes
    public class PatientDto
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string Name { get; set; }
        public string PreviousPrescriptions { get; set; }
        public string LastBloodPressure { get; set; }
        public float Weight { get; set; }
        public float AIC { get; set; }
        public bool ImmunizationsUpToDate { get; set; }
    }
}